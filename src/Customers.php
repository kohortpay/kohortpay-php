<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace kohortpay\sdk;

class Customers 
{

	private SDKConfiguration $sdkConfiguration;

	/**
	 * @param SDKConfiguration $sdkConfig
	 */
	public function __construct(SDKConfiguration $sdkConfig)
	{
		$this->sdkConfiguration = $sdkConfig;
	}
	
    /**
     * find All customers of an organization.
     * 
     * find All customers of an organization.
     * 
     * @return \kohortpay\sdk\Models\Operations\FindAllCustomersResponse
     */
	public function findAll(
    ): \kohortpay\sdk\Models\Operations\FindAllCustomersResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/customers');
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = '*/*';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \kohortpay\sdk\Models\Operations\FindAllCustomersResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Create a new customer.
     * 
     * Create a new customer.
     * 
     * @param \kohortpay\sdk\Models\Components\CreateCustomerDto $request
     * @return \kohortpay\sdk\Models\Operations\CreateCustomerResponse
     */
	public function create(
        \kohortpay\sdk\Models\Components\CreateCustomerDto $request,
    ): \kohortpay\sdk\Models\Operations\CreateCustomerResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/customers');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = '*/*';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \kohortpay\sdk\Models\Operations\CreateCustomerResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Delete a customer.
     * 
     * Delete a customer.
     * 
     * @param string $id
     * @return \kohortpay\sdk\Models\Operations\DeleteCustomerResponse
     */
	public function delete(
        string $id,
    ): \kohortpay\sdk\Models\Operations\DeleteCustomerResponse
    {
        $request = new \kohortpay\sdk\Models\Operations\DeleteCustomerRequest();
        $request->id = $id;
        
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/customers/{id}', \kohortpay\sdk\Models\Operations\DeleteCustomerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = '*/*';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \kohortpay\sdk\Models\Operations\DeleteCustomerResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * find All customers of an organization.
     * 
     * find All customers of an organization.
     * 
     * @param string $id
     * @return \kohortpay\sdk\Models\Operations\FindOneCustomerResponse
     */
	public function findOne(
        string $id,
    ): \kohortpay\sdk\Models\Operations\FindOneCustomerResponse
    {
        $request = new \kohortpay\sdk\Models\Operations\FindOneCustomerRequest();
        $request->id = $id;
        
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/customers/{id}', \kohortpay\sdk\Models\Operations\FindOneCustomerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = '*/*';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \kohortpay\sdk\Models\Operations\FindOneCustomerResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Update a customer.
     * 
     * Update a customer.
     * 
     * @param string $id
     * @param \kohortpay\sdk\Models\Components\UpdateCustomerDto $updateCustomerDto
     * @return \kohortpay\sdk\Models\Operations\UpdateCustomerResponse
     */
	public function updateCustomer(
        string $id,
        \kohortpay\sdk\Models\Components\UpdateCustomerDto $updateCustomerDto,
    ): \kohortpay\sdk\Models\Operations\UpdateCustomerResponse
    {
        $request = new \kohortpay\sdk\Models\Operations\UpdateCustomerRequest();
        $request->id = $id;
        $request->updateCustomerDto = $updateCustomerDto;
        
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/customers/{id}', \kohortpay\sdk\Models\Operations\UpdateCustomerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateCustomerDto", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = '*/*';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \kohortpay\sdk\Models\Operations\UpdateCustomerResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
}